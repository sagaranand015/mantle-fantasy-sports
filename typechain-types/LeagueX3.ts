/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export declare namespace LeagueX3 {
  export type LeaderboardDataStruct = {
    userAddress: PromiseOrValue<string>;
    totalPoints: PromiseOrValue<BigNumberish>;
  };

  export type LeaderboardDataStructOutput = [string, number] & {
    userAddress: string;
    totalPoints: number;
  };

  export type LeagueDataStruct = {
    name: PromiseOrValue<string>;
    img: PromiseOrValue<string>;
    metadata: PromiseOrValue<string>;
    matchName: PromiseOrValue<string>;
    teamA: PromiseOrValue<string>;
    teamB: PromiseOrValue<string>;
    isRunning: PromiseOrValue<boolean>;
    isFinished: PromiseOrValue<boolean>;
    leaguePrice: PromiseOrValue<BigNumberish>;
    squadLimit: PromiseOrValue<BigNumberish>;
  };

  export type LeagueDataStructOutput = [
    string,
    string,
    string,
    string,
    string,
    string,
    boolean,
    boolean,
    number,
    number
  ] & {
    name: string;
    img: string;
    metadata: string;
    matchName: string;
    teamA: string;
    teamB: string;
    isRunning: boolean;
    isFinished: boolean;
    leaguePrice: number;
    squadLimit: number;
  };

  export type UserLeagueDataStruct = {
    leagueName: PromiseOrValue<string>;
    squads: PromiseOrValue<string>;
  };

  export type UserLeagueDataStructOutput = [string, string] & {
    leagueName: string;
    squads: string;
  };
}

export interface LeagueX3Interface extends utils.Interface {
  functions: {
    "CalculateLeaderboard(string,string,address,uint32)": FunctionFragment;
    "CreateUpdateLeague(string,string,string,string,string,string,bool,bool,uint32,uint8)": FunctionFragment;
    "GetAllUserParticipation(address)": FunctionFragment;
    "GetAllUsersForLeague(string,string)": FunctionFragment;
    "GetLeagueLeaderboard(string,string)": FunctionFragment;
    "GetLeagues(string)": FunctionFragment;
    "GetUserLeagueParticipation(address,string)": FunctionFragment;
    "UserParticipate(address,string,string,string)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "CalculateLeaderboard"
      | "CreateUpdateLeague"
      | "GetAllUserParticipation"
      | "GetAllUsersForLeague"
      | "GetLeagueLeaderboard"
      | "GetLeagues"
      | "GetUserLeagueParticipation"
      | "UserParticipate"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "CalculateLeaderboard",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "CreateUpdateLeague",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<boolean>,
      PromiseOrValue<boolean>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "GetAllUserParticipation",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "GetAllUsersForLeague",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "GetLeagueLeaderboard",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "GetLeagues",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "GetUserLeagueParticipation",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "UserParticipate",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "CalculateLeaderboard",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "CreateUpdateLeague",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "GetAllUserParticipation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "GetAllUsersForLeague",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "GetLeagueLeaderboard",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "GetLeagues", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "GetUserLeagueParticipation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "UserParticipate",
    data: BytesLike
  ): Result;

  events: {};
}

export interface LeagueX3 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: LeagueX3Interface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    CalculateLeaderboard(
      leagueName: PromiseOrValue<string>,
      matchName: PromiseOrValue<string>,
      user_address: PromiseOrValue<string>,
      finalPoints: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    CreateUpdateLeague(
      matchName: PromiseOrValue<string>,
      name: PromiseOrValue<string>,
      img: PromiseOrValue<string>,
      metadata: PromiseOrValue<string>,
      teamA: PromiseOrValue<string>,
      teamB: PromiseOrValue<string>,
      isRunning: PromiseOrValue<boolean>,
      isFinished: PromiseOrValue<boolean>,
      leaguePrice: PromiseOrValue<BigNumberish>,
      squadLimit: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    GetAllUserParticipation(
      user_addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string, LeagueX3.UserLeagueDataStructOutput[]]>;

    GetAllUsersForLeague(
      leagueName: PromiseOrValue<string>,
      matchName: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    GetLeagueLeaderboard(
      leagueName: PromiseOrValue<string>,
      matchName: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[LeagueX3.LeaderboardDataStructOutput[]]>;

    GetLeagues(
      matchCid: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[LeagueX3.LeagueDataStructOutput[]]>;

    GetUserLeagueParticipation(
      user_addr: PromiseOrValue<string>,
      leagueName: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [string, LeagueX3.UserLeagueDataStructOutput] & {
        u_addr: string;
        u_league: LeagueX3.UserLeagueDataStructOutput;
      }
    >;

    UserParticipate(
      user_addr: PromiseOrValue<string>,
      leagueName: PromiseOrValue<string>,
      matchName: PromiseOrValue<string>,
      squadLink: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  CalculateLeaderboard(
    leagueName: PromiseOrValue<string>,
    matchName: PromiseOrValue<string>,
    user_address: PromiseOrValue<string>,
    finalPoints: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  CreateUpdateLeague(
    matchName: PromiseOrValue<string>,
    name: PromiseOrValue<string>,
    img: PromiseOrValue<string>,
    metadata: PromiseOrValue<string>,
    teamA: PromiseOrValue<string>,
    teamB: PromiseOrValue<string>,
    isRunning: PromiseOrValue<boolean>,
    isFinished: PromiseOrValue<boolean>,
    leaguePrice: PromiseOrValue<BigNumberish>,
    squadLimit: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  GetAllUserParticipation(
    user_addr: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<[string, LeagueX3.UserLeagueDataStructOutput[]]>;

  GetAllUsersForLeague(
    leagueName: PromiseOrValue<string>,
    matchName: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string[]>;

  GetLeagueLeaderboard(
    leagueName: PromiseOrValue<string>,
    matchName: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<LeagueX3.LeaderboardDataStructOutput[]>;

  GetLeagues(
    matchCid: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<LeagueX3.LeagueDataStructOutput[]>;

  GetUserLeagueParticipation(
    user_addr: PromiseOrValue<string>,
    leagueName: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [string, LeagueX3.UserLeagueDataStructOutput] & {
      u_addr: string;
      u_league: LeagueX3.UserLeagueDataStructOutput;
    }
  >;

  UserParticipate(
    user_addr: PromiseOrValue<string>,
    leagueName: PromiseOrValue<string>,
    matchName: PromiseOrValue<string>,
    squadLink: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    CalculateLeaderboard(
      leagueName: PromiseOrValue<string>,
      matchName: PromiseOrValue<string>,
      user_address: PromiseOrValue<string>,
      finalPoints: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<LeagueX3.LeaderboardDataStructOutput[]>;

    CreateUpdateLeague(
      matchName: PromiseOrValue<string>,
      name: PromiseOrValue<string>,
      img: PromiseOrValue<string>,
      metadata: PromiseOrValue<string>,
      teamA: PromiseOrValue<string>,
      teamB: PromiseOrValue<string>,
      isRunning: PromiseOrValue<boolean>,
      isFinished: PromiseOrValue<boolean>,
      leaguePrice: PromiseOrValue<BigNumberish>,
      squadLimit: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<LeagueX3.LeagueDataStructOutput>;

    GetAllUserParticipation(
      user_addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string, LeagueX3.UserLeagueDataStructOutput[]]>;

    GetAllUsersForLeague(
      leagueName: PromiseOrValue<string>,
      matchName: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string[]>;

    GetLeagueLeaderboard(
      leagueName: PromiseOrValue<string>,
      matchName: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<LeagueX3.LeaderboardDataStructOutput[]>;

    GetLeagues(
      matchCid: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<LeagueX3.LeagueDataStructOutput[]>;

    GetUserLeagueParticipation(
      user_addr: PromiseOrValue<string>,
      leagueName: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [string, LeagueX3.UserLeagueDataStructOutput] & {
        u_addr: string;
        u_league: LeagueX3.UserLeagueDataStructOutput;
      }
    >;

    UserParticipate(
      user_addr: PromiseOrValue<string>,
      leagueName: PromiseOrValue<string>,
      matchName: PromiseOrValue<string>,
      squadLink: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string, LeagueX3.UserLeagueDataStructOutput]>;
  };

  filters: {};

  estimateGas: {
    CalculateLeaderboard(
      leagueName: PromiseOrValue<string>,
      matchName: PromiseOrValue<string>,
      user_address: PromiseOrValue<string>,
      finalPoints: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    CreateUpdateLeague(
      matchName: PromiseOrValue<string>,
      name: PromiseOrValue<string>,
      img: PromiseOrValue<string>,
      metadata: PromiseOrValue<string>,
      teamA: PromiseOrValue<string>,
      teamB: PromiseOrValue<string>,
      isRunning: PromiseOrValue<boolean>,
      isFinished: PromiseOrValue<boolean>,
      leaguePrice: PromiseOrValue<BigNumberish>,
      squadLimit: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    GetAllUserParticipation(
      user_addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    GetAllUsersForLeague(
      leagueName: PromiseOrValue<string>,
      matchName: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    GetLeagueLeaderboard(
      leagueName: PromiseOrValue<string>,
      matchName: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    GetLeagues(
      matchCid: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    GetUserLeagueParticipation(
      user_addr: PromiseOrValue<string>,
      leagueName: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    UserParticipate(
      user_addr: PromiseOrValue<string>,
      leagueName: PromiseOrValue<string>,
      matchName: PromiseOrValue<string>,
      squadLink: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    CalculateLeaderboard(
      leagueName: PromiseOrValue<string>,
      matchName: PromiseOrValue<string>,
      user_address: PromiseOrValue<string>,
      finalPoints: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    CreateUpdateLeague(
      matchName: PromiseOrValue<string>,
      name: PromiseOrValue<string>,
      img: PromiseOrValue<string>,
      metadata: PromiseOrValue<string>,
      teamA: PromiseOrValue<string>,
      teamB: PromiseOrValue<string>,
      isRunning: PromiseOrValue<boolean>,
      isFinished: PromiseOrValue<boolean>,
      leaguePrice: PromiseOrValue<BigNumberish>,
      squadLimit: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    GetAllUserParticipation(
      user_addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    GetAllUsersForLeague(
      leagueName: PromiseOrValue<string>,
      matchName: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    GetLeagueLeaderboard(
      leagueName: PromiseOrValue<string>,
      matchName: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    GetLeagues(
      matchCid: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    GetUserLeagueParticipation(
      user_addr: PromiseOrValue<string>,
      leagueName: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    UserParticipate(
      user_addr: PromiseOrValue<string>,
      leagueName: PromiseOrValue<string>,
      matchName: PromiseOrValue<string>,
      squadLink: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
